const fs = require("fs");
const path = require("path");

// Define the source directory for icon SVG files and the output directory for generated components.
const assetsDir = path.join(__dirname, "assets/icons");
const outputDir = path.join(__dirname, "sf-symbols");
const exportDir = path.join(__dirname, "expo-sf-symbols/index.tsx");

// Create the output directory if it doesn't exist.
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir);
}

// Read the list of SVG icon files in the source directory.
const iconFiles = fs.readdirSync(assetsDir);

// Initialize the content for the index file.
let indexFileContent = `
/*
* This file was generated by expo-sf-symbols
*
* 
*/

`;

// Iterate through each icon file for processing and component generation.
iconFiles.forEach((iconFile) => {
  // Clean the filename by replacing invalid characters.
  const baseName = path.basename(iconFile, path.extname(iconFile));
  const capitalizedEachWordBetweenDots = baseName
    .split(".")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
  const iconName = capitalizedEachWordBetweenDots.replace(/[^a-zA-Z0-9]/g, "");
  const iconFilePath = path.join(assetsDir, iconFile);

  // Read the content of the SVG file into the iconContent variable.
  let iconContent = fs.readFileSync(iconFilePath, "utf8");

  // Replace 'fill=""' with 'fill="currentColor"' to make the icon customizable.
  iconContent = iconContent.replace(/fill=""/g, 'fill="currentColor"');

  // Capitalize the first letter of the component name.
  const capitalizedIconName =
    iconName.charAt(0).toUpperCase() + iconName.slice(1);

  // Generate the component for the SVG icon.
  const iconComponent = `

  /*
  * This file was generated by expo-sf-symbols
  *
  * 
  */

import React from "react";
import { SvgXml } from "react-native-svg";

interface IconProps {
  width?: number;
  height?: number;
  color?: string;
  opacity?: number;
}

const iconXml = \`
${iconContent}
\`;

export const ${capitalizedIconName} = (props: IconProps) => {
  return (
    <SvgXml xml={iconXml} width={props.width || 40} height={props.height || 40} color={props.color || "black"} opacity={props.opacity || 1} />
  );
};
  `;

  // Write the generated component to the output directory.
  fs.writeFileSync(
    path.join(outputDir, `${capitalizedIconName}.tsx`),
    iconComponent
  );

  // Update the import/export statements in the index file.
  indexFileContent += `export { ${capitalizedIconName} } from "./${capitalizedIconName}";\n`;
});

// Write the updated index.tsx file.
fs.writeFileSync(path.join(outputDir, "index.tsx"), indexFileContent);
